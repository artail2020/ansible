---
# アプリデプロイ先ディレクトリ作成
- name: create app base directory
  file:
    path: "{{ app_base_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: yes
  become: yes
# github連携用の秘密鍵を~/.ssh配下へ転送
- name: export github private key
  copy:
    src: "~/.ssh/{{ github_ssh_private_key_file_name }}"
    dest: "{{ ansible_env.HOME }}/.ssh/{{ github_ssh_private_key_file_name }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0400"
# githubからアプリをクローン
- name: git clone application from github
  git:
    repo: git@github.com:artail2020/association_tutorial.git
    dest: "{{ app_base_path }}/{{ app_name }}"
    key_file: "{{ ansible_env.HOME }}/.ssh/{{ github_ssh_private_key_file_name }}"
    accept_hostkey: yes
# config配下のファイルをtemplateから複製
- name: config file copy from template
  copy:
    src: "{{ item.source }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  loop:
    - source: "{{ app_base_path }}/{{ app_name }}/config/database-template.yml"
      dest: "{{ app_base_path }}/{{ app_name }}/config/database.yml"
    - source: "{{ app_base_path }}/{{ app_name }}/config/environments/development-template.rb"
      dest: "{{ app_base_path }}/{{ app_name }}/config/environments/development.rb"
    - source: "{{ app_base_path }}/{{ app_name }}/config/puma-template.rb"
      dest: "{{ app_base_path }}/{{ app_name }}/config/puma.rb"
# database.ymlにユーザー・パスワード・エンドポイントを反映
- name: database config replace user, password, host
  replace:
    path: "{{ app_base_path }}/{{ app_name }}/config/database.yml"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  loop:
    - regexp: "# user"
      replace: "{{ db_username }}"
    - regexp: "# password"
      replace: "{{ db_password }}"
    - regexp: "# host"
      replace: "{{ db_rds_host }}"
# development.rbにconfig.hostsを追加
- name: environments/development add hosts
  replace:
    path: "{{ app_base_path }}/{{ app_name }}/config/environments/development.rb"
    regexp: '^end$'
    replace: '  config.hosts << ''.amazonaws.com''\nend'
# puma.rbのポート指定コメントアウト、sockファイルのbind追加
- name: puma port fetch commentout
  replace:
    path: "{{ app_base_path }}/{{ app_name }}/config/puma.rb"
    regexp: '^port'
    replace: '# port'
- name: puma insert sock file bind
  lineinfile:
    path: "{{ app_base_path }}/{{ app_name }}/config/puma.rb"
    insertafter: '^# port'
    line: 'bind "unix://#{Rails.root}/tmp/sockets/puma.sock"'
# nginx設定ファイルを転送
- name: nginx to puma config file copy
  copy:
    src: "{{ app_name }}.conf"
    dest: "/etc/nginx/conf.d/{{ app_name }}.conf"
  become: yes
  notify: nginx_restarted
# yarn パッケージインストール
- name: yarn package install
  yarn:
    path: "{{ app_base_path }}/{{ app_name }}/"
# bundleインストール
- name: bundle install
  command: "{{ rbenv_path }}/shims/bundle install"
  args:
    chdir: "{{ app_base_path }}/{{ app_name }}/"
# rails データベース構築・反映
- name: rails DB create
  command: "{{ rbenv_path }}/shims/rails db:create"
  args:
    chdir: "{{ app_base_path }}/{{ app_name }}/"
- name: rails DB migrate
  command: "{{ rbenv_path }}/shims/rails db:migrate"
  args:
    chdir: "{{ app_base_path }}/{{ app_name }}/"
# puma 起動シェルを作成
- name: create shell puma start
  copy:
    dest: "{{ ansible_env.HOME }}/puma.sh"
    content: |
      #!/bin/bash
      cd /var/www/rails/association_tutorial
      bundle exec rails s
    mode: "0755"
# puma systemd定義ファイルを転送
- name: puma unit add systemd
  copy:
    src: puma.service
    dest: /etc/systemd/system/puma.service
  become: yes
# systemdリロード後puma起動・自動起動有効化
- name: systemd reload, puma restart and enable
  systemd:
    name: puma
    state: restarted
    daemon_reload: yes
    enabled: yes
  become: yes
