---
# アプリデプロイ先ディレクトリ作成
- name: create app base directory
  file:
    path: "{{ app_base_path }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    recurse: yes
  become: yes
# github連携用の秘密鍵を~/.ssh配下へ転送
- name: export github private key
  copy:
    src: "~/.ssh/{{ github_ssh_private_key_file_name }}"
    dest: "{{ ansible_env.HOME }}/.ssh/{{ github_ssh_private_key_file_name }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0400"
# githubからアプリをクローン
- name: git clone application from github
  git:
    repo: git@github.com:artail2020/association_tutorial.git
    dest: "{{ app_base_path }}/{{ app_name }}"
    key_file: "{{ ansible_env.HOME }}/.ssh/{{ github_ssh_private_key_file_name }}"
    accept_hostkey: yes
# config配下のファイルをtemplateから複製
- name: config file copy from template
  copy:
    src: "{{ item.source }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  loop:
    - source: "{{ app_base_path }}/{{ app_name }}/config/database-template.yml"
      dest: "{{ app_base_path }}/{{ app_name }}/config/database.yml"
    - source: "{{ app_base_path }}/{{ app_name }}/config/environments/development-template.rb"
      dest: "{{ app_base_path }}/{{ app_name }}/config/environments/development.rb"
    - source: "{{ app_base_path }}/{{ app_name }}/config/puma-template.rb"
      dest: "{{ app_base_path }}/{{ app_name }}/config/puma.rb"
# database.ymlにユーザー・パスワード・エンドポイントを反映
- name: database config replace user, password, host
  replace:
    path: "{{ app_base_path }}/{{ app_name }}/config/database.yml"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  loop:
    - regexp: "# user"
      replace: "{{ hostvars['database-cf-1'].master_username }}"
    - regexp: "# password"
      replace: "{{ db_password }}"
    - regexp: "# host"
      replace: "{{ hostvars['database-cf-1'].endpoint.address }}"
# development.rbにconfig.hostsを追加
- name: environments/development add hosts
  lineinfile:
    path: "{{ app_base_path }}/{{ app_name }}/config/environments/development.rb"
    insertbefore: '^end$'
    line: '  config.hosts << ''.amazonaws.com'''
# puma.rbのポート指定コメントアウト、sockファイルのbind追加
- name: puma port fetch commentout, insert sock file bind
  lineinfile:
    path: "{{ app_base_path }}/{{ app_name }}/config/puma.rb"
    regexp: '^(port.*)$'
    line: '#\1\nbind "unix://#{Rails.root}/tmp/sockets/puma.sock"'
    backrefs: yes
# nginx設定ファイルを転送
- name: nginx to puma config file copy
  template:
    src: "app_deploy/{{ app_name }}.conf.j2"
    dest: "/etc/nginx/conf.d/{{ app_name }}.conf"
  become: yes
  notify: nginx_restarted
# デフォルトのnginx設定のserverディレクティブを削除、元設定をバックアップ
- name: nginx default config remove server directive
  replace:
    path: /etc/nginx/nginx.conf
    after: 'include /etc/nginx/conf.d/\*\.conf;'
    regexp: '^([^#\n}].*?)$'
    replace: '# \1'
    backup: yes
  become: yes
  notify: nginx_restarted
# yarn パッケージインストール
- name: yarn package install
  yarn:
    path: "{{ app_base_path }}/{{ app_name }}/"
# bundleインストール
- name: bundle install
  command: "{{ rbenv_path }}/shims/bundle install"
  args:
    chdir: "{{ app_base_path }}/{{ app_name }}/"
# rails データベース構築・反映
- name: rails DB create
  command: "{{ rbenv_path }}/shims/rails db:create"
  args:
    chdir: "{{ app_base_path }}/{{ app_name }}/"
- name: rails DB migrate
  command: "{{ rbenv_path }}/shims/rails db:migrate"
  args:
    chdir: "{{ app_base_path }}/{{ app_name }}/"
  ignore_errors: yes
# puma 起動シェルを作成
- name: create shell puma start
  template:
    src: app_deploy/puma.sh.j2
    dest: "{{ ansible_env.HOME }}/puma.sh"
    mode: "0755"
# puma systemd定義ファイルを転送
- name: puma unit add systemd
  template:
    src: app_deploy/puma.service.j2
    dest: /etc/systemd/system/puma.service
  become: yes
# systemdリロード後puma起動・自動起動有効化
- name: systemd reload, puma restart and enable
  systemd:
    name: puma
    state: restarted
    daemon_reload: yes
    enabled: yes
  become: yes
# アップロード画像保管ディレクトリ作成
- name: create image uploads directory
  file:
    path: "{{ app_base_path }}/{{ app_name }}/public/uploads"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
    recurse: yes
# 画像ディレクトリにS3バケットをマウント
- name: S3 mount image uploads directory
  mount:
    path: "{{ app_base_path }}/{{ app_name }}/public/uploads"
    src: "{{ go_path }}/bin/goofys#{{ s3_bucket_name }}"
    fstype: fuse
    opts: _netdev,allow_other,--dir-mode=0755,--file-mode=0644,--uid=1000,--gid=1000
    state: mounted
  become: yes
